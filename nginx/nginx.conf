events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    keepalive_timeout  65;

    # Configuração de upstream para melhor controle de erros
    upstream prometheus_backend {
        server prometheus:9090 max_fails=3 fail_timeout=30s;
    }
    
    upstream grafana_backend {
        server grafana:4000 max_fails=3 fail_timeout=30s;
    }
    
    upstream api_backend {
        server backend:3001 max_fails=3 fail_timeout=30s;
    }

    # Configuração principal HTTP - aceita qualquer hostname
    server {
        listen 80 default_server;
        server_name automacao.cmm.am.gov.br 172.18.1.32 _ default;
        
        root /usr/share/nginx/html;
        index index.html;
        
        # Log para debug
        access_log /var/log/nginx/access.log main;
        error_log /var/log/nginx/error.log debug;
        
        # Proxy reverso para Grafana
        location /grafana/ {
            proxy_pass http://grafana_backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Configurações adicionais para Grafana
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_cache_bypass $http_upgrade;
            
            # Evitar redirecionamentos infinitos
            proxy_redirect http://grafana:4000/ /grafana/;
            proxy_redirect default;
            
            # Ajustes para evitar problemas
            proxy_buffering off;
            proxy_http_version 1.1;
            proxy_read_timeout 300s;
            proxy_send_timeout 300s;
            
            # Tratamento de erro
            error_page 502 503 504 = @grafana_error;
        }
        
        # Proxy reverso para Prometheus
        location /prometheus/ {
            proxy_pass http://prometheus_backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeouts mais rápidos
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
            
            # Tratamento de erro
            error_page 502 503 504 = @prometheus_error;
        }
        
        # Proxy reverso para a API de automação
        location /api/ {
            proxy_pass http://api_backend/api/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Configurações adicionais para evitar timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # Tratamento de erro
            error_page 502 503 504 = @api_error;
        }
        
        # Rota para health check da API
        location /api/health {
            proxy_pass http://api_backend/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Páginas de erro personalizadas
        location @prometheus_error {
            return 503 'Prometheus temporariamente indisponível. Verifique se o serviço está rodando.';
            add_header Content-Type text/plain;
        }
        
        location @grafana_error {
            return 503 'Grafana temporariamente indisponível. Verifique se o serviço está rodando.';
            add_header Content-Type text/plain;
        }
        
        location @api_error {
            return 503 'API temporariamente indisponível. Verifique se o serviço está rodando.';
            add_header Content-Type text/plain;
        }
        
        # Erro genérico para outros serviços
        location @service_error {
            return 503 'Serviço temporáriamente indisponível. Verifique se o container está rodando.';
            add_header Content-Type text/plain;
        }
        
        # Servir o frontend React - qualquer outra rota vai para o frontend
        location / {
            try_files $uri $uri/ /index.html;
        }
        
        # Health check
        location /health {
            return 200 'Nginx OK';
            add_header Content-Type text/plain;
        }
    }

    # Configuração do stub_status para métricas
    server {
        listen 8080;
        location /stub_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 172.0.0.0/8;
            deny all;
        }
        
        location / {
            return 200 'Nginx is running\n';
        }
    }
    
    # Servidor HTTP adicional para debug (porta 8081)
    server {
        listen 8081;
        server_name _;
        
        root /usr/share/nginx/html;
        index index.html;
        
        # Frontend React - todas as rotas
        location / {
            try_files $uri $uri/ /index.html;
        }
        
        # Status do servidor
        location /status {
            return 200 'Servidor HTTP funcionando na porta 8081\n';
            add_header Content-Type text/plain;
        }
    }

    # Configuração principal com HTTPS - aceita qualquer hostname
    server {
        listen 443 ssl default_server;
        server_name automacao.cmm.am.gov.br 172.18.1.32 _ default;
        
        # Certificados SSL (opcionais - servidor funciona sem eles)
        ssl_certificate /etc/ssl/certs/server.crt;
        ssl_certificate_key /etc/ssl/certs/server.key;
        
        # Fallback para certificado auto-assinado se os certificados não existirem
        ssl_certificate_key /etc/ssl/certs/server.key;
        
        # Configurações SSL mais tolerantes
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;
        
        root /usr/share/nginx/html;
        index index.html;
        
        # Log para debug
        access_log /var/log/nginx/access_ssl.log main;
        error_log /var/log/nginx/error_ssl.log debug;
        
        # Proxy reverso para Grafana
        location /grafana/ {
            proxy_pass http://grafana_backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Configurações adicionais para Grafana
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_cache_bypass $http_upgrade;
            
            # Evitar redirecionamentos infinitos
            proxy_redirect http://grafana:4000/ /grafana/;
            proxy_redirect default;
            
            # Ajustes para evitar problemas
            proxy_buffering off;
            proxy_http_version 1.1;
            proxy_read_timeout 300s;
            proxy_send_timeout 300s;
            
            # Tratamento de erro
            error_page 502 503 504 = @grafana_error;
        }
        
        # Proxy reverso para Prometheus
        location /prometheus/ {
            proxy_pass http://prometheus_backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeouts mais rápidos
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
            
            # Tratamento de erro
            error_page 502 503 504 = @prometheus_error;
        }
        
        # Proxy reverso para a API de automação
        location /api/ {
            proxy_pass http://api_backend/api/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Configurações adicionais para evitar timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # Tratamento de erro
            error_page 502 503 504 = @api_error;
        }
        
        # Rota para health check da API
        location /api/health {
            proxy_pass http://api_backend/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Servir o frontend React - qualquer outra rota vai para o frontend
        location / {
            try_files $uri $uri/ /index.html;
        }
        
        # Health check
        location /health {
            return 200 'OK';
            add_header Content-Type text/plain;
        }
    }
}